%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: RebolNewLocal
file_extensions:
  - r
  - r2
  - r3
  - reb

variables:
  comment_line_start: ;
  delimiters: \[\]{}"\(\)/\\@#\$%\^,;<>
  non_ident_chars: '{{delimiters}}\s'
  non_ident_start_chars: \d'{{non_ident_chars}}
  ident: '[^{{non_ident_start_chars}}][^{{non_ident_chars}}]*'
  fractional: \d+([.,])\d+(?:([Ee][+-]?)\d+)?
  non_url_chars: '\s\[\]\(\){}"%'
  non_email_chars: '{{non_url_chars}}:'
  months: '[A-Za-z]{3}|January|Febuary|March|April|May|June|July|August|September|October|November|December'

first_line_match: '^\s*(?i)(Rebol)\s\['
scope: source.rebol
contexts:
  prototype:
    - include: match-comments

  main:
    - include: match-literals
    - include: match-constants
    - include: match-idents
   # - include: type-literal
   # - include: strings
    - include: values
    - include: words

  match-literals:
    - include: match-times
    - include: match-dates
    - include: match-money
    - include: match-tuples
    - include: match-tags
    - include: match-emails
    - include: match-urls
    - include: match-filenames
    - include: match-pairs #needs improveents!
    - include: match-characters
    - include: match-binaries
    - include: match-issues
    - include: match-strings
    - include: match-numbers

  match-numbers:
    - include: match-floats
    - include: match-hex-integers
    - include: match-integers


  match-floats:
    - match: '{{fractional}}'
      scope: constant.numeric.float.rebol
      captures:
        1: punctuation.separator.decimal.rebol
        2: punctuation.separator.exponent.rebol

  # TODO: hex integers.
  match-integers:
    - include: match-integers-dec

  match-hex-integers:
    - match: \b([0-9A-F]{2}{0,4})(h)\b
      scope: number.rebol
      captures:
        1: constant.numeric.rebol
        2: storage.type.numeric.hex.rebol

  match-integers-dec:
    - match: \d+
      scope: constant.numeric.integer.rebol

  match-times:
    - match: (?:\d+(:))?\d+(:)\d+(?:([.,])\d+)?(?:(?i)(am|pm))?
      scope: constant.numeric.time.rebol
      captures:
        1: punctuation.separator.time.rebol
        2: punctuation.separator.time.rebol
        3: punctuation.separator.time.rebol
        4: storage.type.ampm.rebol

  match-dates:
    - match: |-
        (?x:
          (?:
            (?:\d+(-)({{months}})(-)\w+)|
            (?:\d+(/)({{months}})(/)\w+)
          )
          (?:
            (/)(?:\d+(:))?\d+(:)\d+(?:([.,])\d+)?(?:(?i)(am|pm))? # Time
            (?:([+-])\d+(:)\d+)?                                  # Timezone
          )?
        )
      scope: constant.numeric.date.rebol
      captures:
        1: punctuation.separator.time.rebol
        2: punctuation.separator.time.rebol
        3: punctuation.separator.time.rebol
        4: punctuation.separator.time.rebol
        5: punctuation.separator.time.rebol
        6: punctuation.separator.time.rebol
        7: punctuation.separator.time.rebol
        8: punctuation.separator.time.rebol
        9: storage.type.ampm.rebol
        10: punctuation.separator.time.rebol
        11: punctuation.separator.time.rebol

  match-money:
    - match: ([a-zA-Z]{0,3})?(\$)(?:\d+|{{fractional}})
      scope: constant.numeric.money.rebol
      captures:
        1: storage.type.money.currency.name.rebol
        2: storage.type.money.currency.symbol.rebol

  # TODO: `punctuation.separator` for punctuation. Requires push/pop.
  match-tuples:
    - match: \d+\.\d+(?:\.|(?:\.\d+)+)
      scope: constant.numeric.tuple.rebol

  match-tags:
    - match: '<(?:\/|%\=?\ )?(?:([-_a-zA-Z0-9]+):)?([-_a-zA-Z0-9:]+)'
      captures:
        0: entity.other.namespace.xml
        1: entity.name.tag.xml
      push:
        - meta_scope: entity.tag.rebol
        - match: (?:\s/|\ %)?>
          pop: true
        - match: " (?:([-_a-zA-Z0-9]+):)?([_a-zA-Z-]+)"
          captures:
            0: entity.other.namespace.xml
            1: entity.other.attribute-name.xml
        - match: "'"
          push:
            - meta_scope: string.quoted.single.xml
            - match: "'"
              pop: true
        - match: '"'
          push:
            - meta_scope: string.quoted.double.xml
            - match: '"'
              pop: true

  # Note: the email literal in Red is EXTREMELY permissive.
  # Note: this is actually ref! datatype: @name
  # TODO: `punctuation.separator` for punctuation. Requires push/pop.
  match-emails:
    - match: '[^{{non_email_chars}}]*(@)[^{{non_email_chars}}]*'
      scope: string.email.rebol
      captures:
        1: storage.type.email.rebol

  # Note: the URL literal in Red is EXTREMELY permissive.
  # TODO: `punctuation.separator` for punctuation. Requires push/pop.
  match-urls:
    - match: '[[:alpha:]][^{{non_url_chars}}:/]*(://?)[^{{non_url_chars}}]*'
      scope: string.url.rebol
      captures:
        1: storage.type.url.rebol

  match-filenames:
    - match: (\%)(")
      scope: string.filename.rebol
      captures:
        1: storage.type.filename.rebol
        2: punctuation.definition.string.begin.rebol
      push:
        - meta_scope: string.filename.rebol
        - include: pop-strings-double
    - match: (\%)[^\s\[\](){};@%]*
      scope: string.filename.rebol
      captures:
        1: storage.type.filename.rebol

  match-characters:
    - match: '(#")'
      scope: storage.type.character.rebol
      captures:
        1: punctuation.definition.character.begin.rebol
      push:
        #TODO: capture invalid chars like: #"xxxxx" and #"^xxx"?
        - meta_scope: storage.string.character.rebol
        - match: '"'
          scope: punctuation.definition.character.end.rebol
          pop: true
        - match: \^\([^)]*\)
          scope: constant.character.escape.rebol
        - match: \^.([^"]+)
          scope: constant.character.escape.rebol
        #  captures:
        #    1: invalid.illegal.rebol

  match-html-characters:
    - match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.html
      captures:
        0: punctuation.definition.entity.html
        2: punctuation.definition.entity.html

  match-escaped-characters:
    #TODO: improve me!
    - match: '\^(\(([0-9a-fA-F]+|del)\)|.)'
      scope: string.escaped.rebol

  match-issues:
    - match: (\#)[\w#-]+
      scope: string.issue.rebol
      captures:
        1: storage.type.issue.rebol

  match-strings:
    - include: match-strings-double
    - include: match-strings-braces

  match-strings-double:
    - match: '"'
      scope: punctuation.definition.string.begin.rebol
      push: pop-strings-double

  pop-char:
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.rebol
      pop: true
    - match: \^\([^)]*\)
      scope: constant.character.escape.rebol
    - match: \^.
      scope: constant.character.escape.rebol

  pop-strings-double:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.rebol
    - include: pop-char

  # TODO support escapes.
  match-strings-braces:
    - match: '{'
      scope: punctuation.definition.string.begin.rebol
      push: pop-strings-braces

  pop-strings-braces:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.rebol
    - match: '}'
      scope: punctuation.definition.string.end.rebol
      pop: true
    #- include: rsp-tag
    - include: match-escaped-characters
    - include: match-html-characters
    - include: match-strings-braces


  match-pairs:
    #Note: Rebol supports decimal pairs (1.2x5.0), Red not!
    #TODO: fix this so X is colorized even with decimal parts
    - match: '(\d+|{{fractional}})(x)(\d+|{{fractional}})'
      scope: constant.numeric.pair.rebol
      captures:
         4: support.strong #punctuation.separator.pair.rebol

  match-binaries:
    - include: match-binary-base-two
    - include: match-binary-base-sixteen
    - include: match-binary-base-sixtyfour

  match-binary-base-sixteen:
    - match: '(16)?#\{'
      captures:
        0: string.binary.prefix
      push:
        - meta_scope: binary.base16.rebol
        - match: '\}'
          captures:
            0: string.binary.prefix
          pop: true
        - match: ';.*$'
          scope: comment.line.rebol
        - match: '[0-9a-fA-F\s]*'
          scope: string.binary.base16.rebol
        - match: .
          scope: invalid.illegal.rebol
  match-binary-base-sixtyfour:
    - match: '64#\{'
      captures:
        0: string.binary.prefix
      push:
        - meta_scope: binary.base64.rebol
        - match: ';.*$'
          scope: comment.line.rebol
        - match: '\}'
          captures:
            0: string.binary.prefix
          pop: true
        - match: '[0-9a-zA-Z+/=\s]*'
          scope: string.binary.base64.rebol
        - match: .
          scope: invalid.illegal.rebol
  match-binary-base-two:
    - match: '2#\{'
      captures:
        0: string.binary.prefix
      push:
        - meta_scope: binary.base2.rebol
        - match: '\}'
          captures:
            0: string.binary.prefix
          pop: true
        - match: ';.*$'
          scope: comment.line.rebol
        - match: '[01\s]s*'
          scope: string.binary.base2.rebol
        - match: .
          scope: invalid.illegal.rebol

  match-comments:
    - include: match-comments-docline
    - include: match-comments-todo
    - include: match-comments-line
    - include: match-comments-block
    #- include: comment-multiline-block

  match-comments-docline:
    - match: '({{comment_line_start}}\-).*$'
      scope: comment.docline.rebol
      captures:
        1: punctuation.definition.comment.begin.rebol

  match-comments-todo:
    - match: '({{comment_line_start}}@@).*$'
      scope: comment.todo.rebol
      captures:
        1: punctuation.definition.comment.begin.rebol

  match-comments-line:
    - match: '({{comment_line_start}}).*$'
      scope: comment.line.rebol
      captures:
        1: punctuation.definition.comment.begin.rebol

  comment-multiline-block:
  #(?![^{{non_ident_chars}}])
    - match: '(comment)([[^{{delimiters}}]|\s]*)(\[)'
      push:
        - meta_scope: comment.multiline.rebol
        - match: '\]'
          pop: true
        - include: comment-multiline-block-string
        - include: comment-multiline-string-nested
        - include: comment-multiline-block-nested
  comment-multiline-block-nested:
    - match: '\['
      push:
        - meta_scope: comment.multiline.rebol
        - match: '\]'
          pop: true
        - include: comment-multiline-block-string
        - include: comment-multiline-string-nested
        - include: comment-multiline-block-nested
  comment-multiline-block-string:
    - match: '"'
      push:
        - meta_scope: comment.multiline.rebol
        - match: '"'
          pop: true
        - match: \^.
  comment-multiline-string:
    - match: 'comment\s*\{'
      push:
        - meta_scope: comment.multiline.rebol
        - match: '\}'
          pop: true
        - match: \^.
        - include: comment-multiline-string-nested
  comment-multiline-string-nested:
    - match: '\{'
      push:
        - meta_scope: comment.multiline.rebol
        - match: '\}'
          pop: true
        - match: \^.
        - include: comment-multiline-string-nested

  match-comments-block:
    - match: (?<=^|{{non_ident_chars}})(comment)(?![^{{non_ident_chars}}])
      scope: comment.block.rebol
      push: pop-comment-block

  # TODO: pop one "form", making it part of the comment (literal, ident, block,
  # group, etc.).
  pop-comment-block:
    - match: ''
      pop: true

  match-constants:
    - match: \b(?:true|false|none)\b
      scope: constant.language.rebol



##############################################
## bellow it needs rewrite ###################







  comments:
    - include: comment-multiline-string
    - include: comment-multiline-block

  function-definition:
    - match: '([A-Za-z=\!\?\*_\+][A-Za-z0-9=_\-\!\?\*\+\.]*):\s+(?i)(function|func|funct|routine|has)\s*(\[)'
      captures:
        1: support.variable.function.rebol
        2: keyword.function
        3: support.strong
      push:
        - meta_scope: function.definition
        - match: "]"
          captures:
            0: support.strong
          pop: true
        - include: function-definition-block
        - include: comments
        #- include: strings
        - include: word-setword
        - include: word-datatype
        - include: word-refinement
  function-definition-block:
    - match: '\['
      push:
        - meta_scope: function.definition.block
        - match: "]"
          pop: true
        - include: comments
        - include: word-datatype
  function-definition-does:
    - match: '([A-Za-z=\!\?\*_\+][A-Za-z0-9=_\-\!\?\*\+\.]*):\s+(?i)(does|context)(?=\s*|\[)'
      scope: function.definition.does
      captures:
        1: support.variable.function.rebol
        2: keyword.function
  parens:
    - match: '(\[|\]|\(|\))'
      scope: keyword.operator.comparison
  rsp-tag:
    - match: <%=
      push:
        - meta_scope: source.rebol
        - match: "%>"
          pop: true
        - include: scope:source.rebol
  singlequotedString:
    - match: "'"
      push:
        - meta_scope: string.quoted.single.xml
        - match: "'"
          pop: true
  string-email:
    - match: '[^\s\n:/\[\]\(\)]+@[^\s\n:/\[\]\(\)]+'
      scope: string.email.rebol
  string-file:
    - match: '%[^\s\n\[\]\(\)]+'
      scope: string.file.rebol
  string-file-quoted:
    - match: '%"'
      captures:
        0: string.file.quoted.rebol
      push:
        - meta_scope: string.file.quoted.rebol
        - match: '"'
          captures:
            0: string.file.quoted.rebol
          pop: true
        - match: "%[A-Fa-f0-9]{2}"
          scope: string.escape.ssraw
#  string-issue:
#    - match: '#[^\s\n\[\]\(\)\/]*'
#      scope: string.issue.rebol

  string-quoted:
    - match: '"'
      push:
        - meta_scope: string.rebol
        - match: '"'
          pop: true
        - include: rsp-tag
        - include: character-inline
        - include: character-html

  string-url:
    - match: '[A-Za-z][\w]{1,9}:(/{0,3}[^\s\n\[\]\(\)]+|//)'
      scope: string.url.rebol
  strings:
    - include: character
    - include: string-quoted
    - include: string-multiline
    - include: string-tag
    - include: string-file-quoted
    - include: string-file
    - include: string-url
    - include: string-email
    - include: string-issue
  type-literal:
    - match: '#\[(?:(\w+!)|(true|false|none))'
      captures:
        0: native.datatype.rebol
        1: logic.rebol
      push:
        - meta_scope: series.literal.rebol
        - match: "]"
          pop: true
        - include: main
  value-number:
    - match: '(?<!\w|\.)([-+]?((\d+\.?\d*)|(\.\d+))((e|E)(\+|-)?\d+)?)(?=\W)'
      scope: constant.numeric.rebol
  value-number-hex:
    - match: '(?<=^|\s|\[|\]|\)|\()([0-9A-F]{2}{0,4})(h)(?=\s|\)|\]|/|;|\"|{\[|\()'
      scope: number.rebol
      captures:
        1: constant.numeric.rebol
        2: constant.numeric.rebol
  value-pair:
    - match: '(?<!\w)([-+]?((\d+\.?\d*)|(\.\d+))((e|E)(\+|-)?\d+)?)x([-+]?((\d+\.?\d*)|(\.\d+))((e|E)(\+|-)?\d+)?)'
      scope: constant.pair.rebol
  value-time:
    - match: '([-+]?[:]\d{1,2}([aApP][mM])?)|([-+]?[:]\d{1,2}[.]\d{0,9})|([-+]?\d{1,2}[:]\d{1,2}([aApP][mM])?)|([-+]?\d{1,2}[:]\d{1,2}[.]\d{0,9})|([-+]?\d{1,2}[:]\d{1,2}[:]\d{1,2}([.]\d{0,9})?([aApP][mM])?)(?!\w)'
      scope: time.rebol
  value-tuple:
    - match: "([[:digit:]]{0,3}[.][[:digit:]]{0,3}[.][[:digit:]]{0,3}([.][[:digit:]]{0,3}){0,7})"
      scope: tuple.rebol
  values:
    - include: value-tuple
    - include: value-pair
    - include: value-money
    - include: value-number-hex
    - include: value-date
    - include: value-time
    - include: value-number
  word:
    - match: \b(?:[A-Za-z_\*\?=_-]+[A-Za-z_0-9=_\-\!\?\*\+\.~:'']*)\b
      scope: word.rebol
  word-datatype:
    - match: '(?<=^|\s|\[|\]|\)|\()([A-Za-z_0-9=_\-\?\*\+\.~:'']+\!|as|to)(?=\s|\)|\])'
      scope: support.type.rebol
  word-getword:
    - match: '(:)({{ident}})'
      scope: support.variable.getword.rebol
      captures:
        1: storage.type.get_word.rebol

  word-group1:
    - match: \b((?i)(native|alias|all|any|as-string|as-binary|bind|bound\?|case|catch|checksum|comment|debase|dehex|exclude|difference|disarm|enbase|form|free|get|get-env|in|intersect|minimum-of|maximum-of|mold|new-line|new-line\?|not|now|prin|print|reduce|compose|construct|reverse|save|script\?|set|shift|throw|to-hex|trace|try|type\?|union|charset|unique|unprotect|unset|use|value\?|compress|decompress|secure|open|close|read|read-io|write-io|write|update|query|wait|input\?|exp|log-10|log-2|log-e|square-root|cosine|sine|tangent|arccosine|arcsine|arctangent|protect|lowercase|uppercase|entab|detab|connected\?|browse|launch|stats|get-modes|set-modes|to-local-file|to-rebol-file|encloak|decloak|create-link|do-browser|bind\?|hide|draw|show|size-text|textinfo|offset-to-caret|caret-to-offset|local-request-file|rgb-to-hsv|hsv-to-rgb|crypt-strength\?|dh-make-key|dh-generate-key|dh-compute-key|dsa-make-key|dsa-generate-key|dsa-make-signature|dsa-verify-signature|rsa-make-key|rsa-generate-key|rsa-encrypt))\b
      scope: support.function.rebol
  word-group2:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(if|either|unless|else|for|foreach|forall|remove-each|until|while|case|loop|repeat|switch)(?=\s|\(|\[|/|;|\"|{)'
      scope: support.function.group2.rebol
  word-group3:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(at|insert|append|tail|head|back|repend|next)(?=\s|\(|\[|\)|\]|/|;|\"|{)'
      scope: keyword.series.rebol
  word-group4:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(off|false|none|on|true|yes|no|null)(?=\s|\(|\[|\)|\]|;|\"|{)'
      scope: logic.rebol
  word-group5:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(halt|quit|exit|return|break|quit)(?=\s|\(|\[|/|;|\"|{)'
      scope: keyword.breaks.rebol
  word-litword:
    - match: '(?<=^|\s|\[|\]|\)|\()''[A-Za-z_0-9=_\-\!\?\*\+\.~:'']+(?=\s|\)|\])'
      scope: keyword.litword.rebol
  word-operator:
    - match: '(==|!=|<=|>=|<>|<|>|>>|>>>|<<|\+|-|=|\*|%|/|\b(and|or|xor))(?=\s|\(|\[|\)|\]|/|;|\"|{)'
      scope: keyword.operator.comparison
  word-refinement:
    - match: '/[^\s\n\[\]\(\)]*'
      scope: keyword.refinement.rebol
  word-setword:
    - match: '[^:\s\n\[\]\(\)]*:'
      scope: support.variable.setword.rebol
  words:
    - include: function-definition
    - include: function-definition-does
    - include: word-refinement
    - include: word-operator
    - include: word-getword
    - include: word-setword
    - include: word-refinement
    - include: word-datatype
    - include: word-group4
    - include: word-group1
    - include: word-group2
    - include: word-group3
    - include: word-group5
    - include: word
